---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: push-generate-coverage-releaseyaml
  annotations:
    pipelinesascode.tekton.dev/task-1: "https://raw.githubusercontent.com/chmouel/tekton-slack-task-status/main/tekton-slack-task-status.yaml" # send slack message on failure
    pipelinesascode.tekton.dev/task: "[git-clone]"
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/on-cel-expression: |
      event == "push" && target_branch == "main" && ("***/*.go".pathChanged() || "config/***".pathChanged() || ".tekton/generate-coverage-release.yaml".pathChanged())
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    tasks:
      - name: fetch
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source
      - name: unit
        runAfter:
          - fetch
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - image: registry.access.redhat.com/ubi9/go-toolset:1.20
              name: get-cache
              workingDir: $(workspaces.source.path)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
                - name: GOLANGCILINT_CACHE
                  value: $(workspaces.source.path)/go-build-cache/golangci-cache
              script: |
                #!/usr/bin/env bash
                set -ex
                mkdir -p ${GOCACHE} ${GOMODCACHE} ${GOLANGCILINT_CACHE}
                cd $(dirname ${GOCACHE})
                curl -fsI http://uploader:8080/golang-cache.tar.gz || {
                    echo "no cache found"
                    exit 0
                }
                echo "Getting cache"
                curl http://uploader:8080/golang-cache.tar.gz|tar -z -x -f- || \
                   curl -X DELETE -F "file=golang-cache.tar.gz" http://uploader:8080/upload
            - name: unittest
              image: registry.access.redhat.com/ubi9/go-toolset:1.20
              workingDir: $(workspaces.source.path)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
              script: |
                #!/usr/bin/env bash
                make test \
                    GO_TEST_FLAGS="-v -race -coverprofile=coverage.txt -covermode=atomic"
      - name: codecov
        runAfter:
          - unit
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: codecov-run
              # Has everything we need in there and we already fetched it!
              image: registry.access.redhat.com/ubi9/go-toolset:1.20
              workingDir: $(workspaces.source.path)
              env:
                - name: CODECOV_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: pipelines-as-code-codecov-token
                      key: token
              script: |
                #!/usr/bin/env bash
                set -eux
                curl -Os https://uploader.codecov.io/v0.1.0_4653/linux/codecov
                chmod +x ./codecov
                git config --global --add safe.directory $(workspaces.source.path)
                git fetch -a --tags
                ./codecov -C {{revision}} -v

      - name: upload-release-yaml
        runAfter:
          - fetch
        taskSpec:
          steps:
            - image: registry.access.redhat.com/ubi9/python-311
              name: release
              workingDir: $(workspaces.source.path)
              env:
                - name: HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: "nightly-ci-github-hub-token"
                      key: "hub-token"
              script: |
                #!/usr/bin/env bash
                set -eux
                git config --global --add safe.directory $(workspaces.source.path)
                git fetch -a --tags
                ssa=$(git rev-parse --short HEAD)
                bash hack/generate-releaseyaml.sh >release.k8s.yaml
                env TARGET_OPENSHIFT=true bash hack/generate-releaseyaml.sh >release.yaml
                allversions=$(
                    echo -n "nightly,stable,"
                    for i in $(git tag -l | grep '^v' | sort -rn); do echo -n "$i,"; done | sed 's/,$//'
                )

                git checkout -B nightly origin/main
                echo nightly > docs/content/VERSION
                echo ${allversions} > docs/content/ALLVERSIONS
                echo "nightly-$ssa-$(date +%Y%m%d)" > pkg/params/version/version.txt
                git add release.yaml release.k8s.yaml docs/content/VERSION docs/content/ALLVERSIONS pkg/params/version/version.txt
                git config --global user.email "pac-dev@redhat.com"
                git config --global user.name "Pipelines as Code CI Robot"
                git commit -m "Release yaml generated from {{repo_url}}/commit/{{revision}}"
                set +x
                echo git push "https://git:\$HUB_TOKEN@github.com/{{ repo_owner }}/{{ repo_name }} nightly:nightly"
                git push --force https://git:$HUB_TOKEN@github.com/{{ repo_owner }}/{{ repo_name }}/ nightly:nightly
                set -x
                git checkout -
          workspaces:
            - name: source
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
    finally:
      - name: finally
        taskRef:
          name: send-slack-notification
        params:
          - name: log_url
            value: "https://console-openshift-console.apps.psipac.ospqa.com"
          - name: openshift
            value: "true"
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
