---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: push-generate-coverage-releaseyaml
  annotations:
    pipelinesascode.tekton.dev/task-1: "https://raw.githubusercontent.com/chmouel/tekton-slack-task-status/main/tekton-slack-task-status.yaml"
    pipelinesascode.tekton.dev/task: "[git-clone]"
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/on-cel-expression: |
      event == "push" && target_branch == "main" && ("***/*.go".pathChanged() || "config/***".pathChanged() || ".tekton/generate-coverage-release.yaml".pathChanged())
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    tasks:
      - name: unit
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: fetch-repo
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
              params:
                - name: output-path
                  value: $(workspaces.source.path)
                - name: url
                  value: "$(params.repo_url)"
                - name: revision
                  value: "$(params.revision)"
            - name: cache-fetch
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/openshift-pipelines/tekton-caches/main/tekton/cache-fetch.yaml
              params:
                - name: patterns
                  value: ["**go.mod", "**go.sum"]
                - name: source
                  value: oci://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-go:{{hash}}
                - name: cachePath
                  value: $(workspaces.source.path)/go-build-cache
                - name: workingdir
                  value: $(workspaces.source.path)
            - name: unittest
              image: golang:1.21
              workingDir: $(workspaces.source.path)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
              script: |
                #!/usr/bin/env bash
                make test \
                    GO_TEST_FLAGS="-v -coverprofile=coverage.txt -covermode=atomic"
            - name: codecov
              # Has everything we need in there and we already fetched it!
              image: golang:1.21
              workingDir: $(workspaces.source.path)
              env:
                - name: CODECOV_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: pipelines-as-code-codecov-token
                      key: token
              script: |
                #!/usr/bin/env bash
                set -eux
                ARCH=aarch64
                git config --global --add safe.directory $(workspaces.source.path)
                git fetch -a --tags
                version=$(curl -s https://uploader.codecov.io/${ARCH}/latest| sed -n '/full_version/ { s/.*full_version...//;s/".*//;p; }')
                curl -LOs https://uploader.codecov.io/${version}/${ARCH}/codecov
                chmod +x ./codecov
                ./codecov -C {{revision}} -v
            - name: upload-release
              image: registry.access.redhat.com/ubi9/python-311
              workingDir: $(workspaces.source.path)
              env:
                - name: HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: "nightly-ci-github-hub-token"
                      key: "hub-token"
              script: |
                #!/usr/bin/env bash
                set -eux
                git config --global --add safe.directory $(workspaces.source.path)
                git fetch -a --tags
                ssa=$(git rev-parse --short HEAD)
                bash hack/generate-releaseyaml.sh >release.k8s.yaml
                env TARGET_OPENSHIFT=true bash hack/generate-releaseyaml.sh >release.yaml
                allversions=$(
                    echo -n "nightly,stable,"
                    for i in $(git tag -l | grep '^v' | sort -rn); do echo -n "$i,"; done | sed 's/,$//'
                )

                git checkout -B nightly origin/main
                echo nightly > docs/content/VERSION
                echo ${allversions} > docs/content/ALLVERSIONS
                echo "nightly-$ssa-$(date +%Y%m%d)" > pkg/params/version/version.txt
                git add release.yaml release.k8s.yaml docs/content/VERSION docs/content/ALLVERSIONS pkg/params/version/version.txt
                git config --global user.email "pac-dev@redhat.com"
                git config --global user.name "Pipelines as Code CI Robot"
                git commit -m "Release yaml generated from {{repo_url}}/commit/{{revision}}"
                set +x
                echo git push "https://git:\$HUB_TOKEN@github.com/{{ repo_owner }}/{{ repo_name }} nightly:nightly"
                git push --force https://git:$HUB_TOKEN@github.com/{{ repo_owner }}/{{ repo_name }}/ nightly:nightly
                set -x
                git checkout -
    workspaces:
      - name: source
    finally:
      - name: finally
        taskRef:
          name: send-slack-notification
        params:
          - name: log_url
            value: "https://console-openshift-console.apps.psipac.ospqa.com"
          - name: openshift
            value: "true"
  workspaces:
    - name: source
      emptyDir: {}
