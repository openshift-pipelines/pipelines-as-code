---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: linters
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push, pull_request]"
    pipelinesascode.tekton.dev/on-target-branch: "[*]"
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/task: "[git-clone]"
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    tasks:
      - name: linters
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: fetch-repo
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
              params:
                - name: output-path
                  value: $(workspaces.source.path)
                - name: url
                  value: "$(params.repo_url)"
                - name: revision
                  value: "$(params.revision)"
            - name: generate-release-yaml
              image: registry.access.redhat.com/ubi9/python-312
              workingDir: $(workspaces.source.path)
              script: |
                set -x
                mkdir -p bin/ # ignored in .gitignore
                ./hack/generate-releaseyaml.sh  > bin/release.yaml
            - name: codespell
              image: registry.access.redhat.com/ubi9/python-312
              workingDir: $(workspaces.source.path)
              script: |
                pip3 install codespell
                codespell -d docs/content pkg test
            - name: shellcheck
              displayName: "Shell scripts linter"
              image: koalaman/shellcheck-alpine
              workingDir: $(workspaces.source.path)
              script: |
                shellcheck $(find hack/ -type f -regex ".*sh" -print)
            - name: gitlint
              displayName: "Git commit linter"
              image: registry.access.redhat.com/ubi9/python-312
              workingDir: $(workspaces.source.path)
              script: |
                set -x
                if [[ "{{ headers['X-Github-Event'] }}" == "" ]]; then
                  echo "Not a GitHub event, skipping gitlint"
                  exit 0
                fi

                if [[ "{{ headers['X-Github-Event'] }}" != "pull_request" ]]; then
                  echo "Not a pull request, skipping gitlint"
                  exit 0
                fi

                git config --global --add safe.directory $(workspaces.source.path)
                git log -1 --format=format:%s |grep -E -q '^Merge branch' && exit 0
                pip3 install gitlint
                gitlint --commit "$(git log --format=format:%H --no-merges -1)" --ignore "Merge branch"

            - name: yamllint
              displayName: "YAML Linter"
              image: cytopia/yamllint
              workingDir: $(workspaces.source.path)
              script: |
                set -x
                yamllint -f parsable -c .yamllint $(find . -type f -regex ".*y[a]ml" -print)

            - name: ruff-lint
              displayName: "Python Linter (ruff)"
              image: ghcr.io/astral-sh/ruff
              workingDir: $(workspaces.source.path)
              args: ["check", "$(workspaces.source.path)"]

            - name: ruff-format
              displayName: "Python Formatter (ruff)"
              image: ghcr.io/astral-sh/ruff
              workingDir: $(workspaces.source.path)
              args: ["format", "$(workspaces.source.path)", "--check"]

            - name: markdownlint
              displayName: "Markdown Linter"
              image: thegeeklab/markdownlint-cli
              workingDir: $(workspaces.source.path)
              script: |
                markdownlint $(find . -type f -regex ".*md"  -not -regex '^./vendor/.*' -not -regex "^./docs/themes/.*" -not -regex './.vale/.*' -not -regex "^./.git/.*" -print)

            - name: vale
              displayName: "Spelling and Grammar"
              image: registry.access.redhat.com/ubi9/python-312
              workingDir: $(workspaces.source.path)
              env:
                - name: HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: "nightly-ci-github-hub-token"
                      key: "hub-token"
              script: |
                version=$(curl -H "Authorization: Bearer ${HUB_TOKEN}" -L -s https://api.github.com/repos/errata-ai/vale/releases/latest|python -c 'import sys, json;dico=json.load(sys.stdin);print(dico["tag_name"])')
                curl -sH "Authorization: Bearer ${HUB_TOKEN}" -L https://github.com/errata-ai/vale/releases/download/${version}/vale_${version/v}_Linux_arm64.tar.gz|tar -xz -C /tmp/ -f- vale
                export NO_COLOR=1
                /tmp/vale docs/content --minAlertLevel=error --output=line

            - name: goreleaser-check
              displayName: "Goreleaser Check"
              image: registry.access.redhat.com/ubi9/python-312
              workingDir: $(workspaces.source.path)
              env:
                - name: HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: "nightly-ci-github-hub-token"
                      key: "hub-token"
              script: |
                set -euo pipefail
                git config --global --add safe.directory $(workspaces.source.path)
                project="goreleaser"
                repo="goreleaser/goreleaser"
                version=$(curl -H "Authorization: Bearer ${HUB_TOKEN}" -L -s https://api.github.com/repos/${repo}/releases/latest|python -c 'import sys, json;dico=json.load(sys.stdin);print(dico["tag_name"])')
                curl -sH "Authorization: Bearer ${HUB_TOKEN}" -L https://github.com/${repo}/releases/download/${version}/${project}_Linux_arm64.tar.gz|tar -xz -C /tmp/ -f- ${project}
                export NO_COLOR=1
                /tmp/goreleaser check
    workspaces:
      - name: source
  workspaces:
    - name: source
      emptyDir: {}
