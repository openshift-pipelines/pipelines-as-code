---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: linters
  annotations:
    pipelinesascode.tekton.dev/on-event: "[push, pull_request]"
    pipelinesascode.tekton.dev/on-target-branch: "[main]"
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/task: "[git-clone]"
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    tasks:
      - name: fetchit
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
        taskRef:
          name: git-clone
        workspaces:
          - name: output
            workspace: source

      - name: generate-release-yaml
        displayName: "Generate release.yaml"
        runAfter:
          - fetchit
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: gen-yaml
              image: registry.access.redhat.com/ubi9/python-311
              workingDir: $(workspaces.source.path)
              script: |
                set -x
                mkdir -p bin/ # ignored in .gitignore
                ./hack/generate-releaseyaml.sh  > bin/release.yaml
        workspaces:
          - name: source
            workspace: source

      - name: gitlint
        displayName: "Git commit linter"
        runAfter:
          - fetchit
        workspaces:
          - name: source
            workspace: source
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: gitlint
              image: jorisroovers/gitlint
              workingDir: $(workspaces.source.path)
              script: |
                git config --global --add safe.directory /workspace/source
                gitlint --commit "$(git log --format=format:%H --no-merges -1)"

      - name: yamllint
        generateName: "YAML Linter"
        runAfter:
          - generate-release-yaml
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: yaml-lint
              image: quay.io/mhutter/yamllint
              workingDir: $(workspaces.source.path)
              script: |
                set -x
                yamllint -f parsable -c .yamllint $(find . -type f -regex ".*y[a]ml" -print)
        workspaces:
          - name: source
            workspace: source

      - name: pylint
        generateName: "Python Linter"
        runAfter:
          - fetchit
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: pylint
              image: registry.gitlab.com/pipeline-components/pylint:latest
              workingDir: $(workspaces.source.path)
              script: |
                pylint -ry $(find . -type f -name '*.py') --output-format=parseable
        workspaces:
          - name: source
            workspace: source

      - name: black
        generateName: "Python Formatter check"
        runAfter:
          - pylint
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: black
              image: registry.gitlab.com/pipeline-components/black:latest
              workingDir: $(workspaces.source.path)
              script: |
                black --check --verbose -- .
        workspaces:
          - name: source
            workspace: source

      - name: markdownlint
        generateName: "Markdown Linter"
        runAfter:
          - fetchit
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: markdown-lint
              image: quay.io/thegeeklab/markdownlint-cli
              workingDir: $(workspaces.source.path)
              script: |
                markdownlint $(find . -type f -regex ".*md"  -not -regex '^./vendor/.*' -not -regex "^./docs/themes/.*" -not -regex './.vale/.*' -not -regex "^./.git/.*" -print)
        workspaces:
          - name: source
            workspace: source

      - name: vale
        generateName: "Spelling and Grammar"
        runAfter:
          - fetchit
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: markdown-lint
              image: quay.io/eclipse/che-docs
              workingDir: $(workspaces.source.path)
              script: |
                export NO_COLOR=1
                vale docs/content --minAlertLevel=error --output=line
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
  workspaces:
    - name: source
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 5Gi
