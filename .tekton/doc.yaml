---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: doc-generation
  annotations:
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/cancel-in-progress: "true"
    pipelinesascode.tekton.dev/on-event: "pull_request"
    pipelinesascode.tekton.dev/on-path-change: "[docs/***]"
    pipelinesascode.tekton.dev/on-target-branch: "main"
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
    - name: hugo_version
      value: "0.96.0"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
      - name: hugo_version
    tasks:
      - name: build-doc
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: fetch-repo
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
              params:
                - name: output-path
                  value: $(workspaces.source.path)
                - name: url
                  value: "$(params.repo_url)"
                - name: revision
                  value: "$(params.revision)"
            - name: cache-fetch
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/chmouel/tekton-caches/refs/heads/chmouel-images/tekton/cache-fetch.yaml
              params:
                - name: patterns
                  value: ["$(workspaces.source.path)/README.md"]
                - name: source
                  value: oci://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-hugo:v$(params.hugo_version)
                - name: cachePath
                  value: $(workspaces.source.path)/tmp/hugo
                - name: workingdir
                  value: $(workspaces.source.path)

            - name: hugo-gen
              image: golang:1.23
              workingDir: $(workspaces.source.path)
              env:
                - name: UPLOADER_PUBLIC_URL
                  valueFrom:
                    secretKeyRef:
                      name: "uploader-upload-credentials"
                      key: "public_url"
              script: |
                #!/usr/bin/env bash
                set -xeuo pipefail
                git config --global --add safe.directory $(workspaces.source.path)
                make download-hugo HUGO_VERSION=$(params.hugo_version)
                hugobin=$(git rev-parse --show-toplevel)/tmp/hugo/hugo
                [[ -x ${hugobin} ]] || {
                  echo "Hugo was not downloaded properly" && exit 1
                }
                cd $(git rev-parse --show-toplevel)/docs
                sed -i '1acanonifyURLs = true' config.toml
                url="${UPLOADER_PUBLIC_URL}/docs/{{ pull_request_number }}"
                ${hugobin} --gc --minify -d {{ pull_request_number }} -b ${url}
                echo "Preview URL: ${url}"
            - name: upload-to-static-server
              # it has curl and we already pulled it
              image: curlimages/curl
              workingDir: $(workspaces.source.path)
              env:
                - name: HUB_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: "nightly-ci-github-hub-token"
                      key: "hub-token"
                - name: UPLOADER_UPLOAD_CREDENTIALS
                  valueFrom:
                    secretKeyRef:
                      name: "uploader-upload-credentials"
                      key: "credentials"
                - name: UPLOADER_PUBLIC_URL
                  valueFrom:
                    secretKeyRef:
                      name: "uploader-upload-credentials"
                      key: "public_url"
              script: |
                cd docs
                test -d "{{ pull_request_number }}" || exit 0
                tar czf - "{{ pull_request_number }}" | curl -u ${UPLOADER_UPLOAD_CREDENTIALS} -F path=docs -F targz=true -X POST -F file=@- http://uploader:8080/upload
                # Post as status
                set +x
                curl -H "Authorization: Bearer ${HUB_TOKEN}" -H 'Accept: application/vnd.github.v3+json' -X POST https://api.github.com/repos/{{repo_owner}}/{{repo_name}}/statuses/{{revision}} -d \
                                                            "{\"state\": \"success\", \"target_url\": \"${UPLOADER_PUBLIC_URL}/docs/{{ pull_request_number }}\", \"description\": \"Generated with brio.\", \"context\": \"Pipelines as Code Preview URL\"}"
            - name: cache-upload
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/chmouel/tekton-caches/refs/heads/chmouel-images/tekton/cache-upload.yaml
              params:
                - name: patterns
                  value: ["$(workspaces.source.path)/README.md"]
                - name: target
                  value: oci://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-hugo:v$(params.hugo_version)
                - name: cachePath
                  value: $(workspaces.source.path)/tmp/hugo
                - name: workingdir
                  value: $(workspaces.source.path)
                - name: force-cache-upload
                  value: "false"
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
  workspaces:
    - name: source
      emptyDir: {}
