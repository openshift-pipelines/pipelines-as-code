---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: go-testing
  annotations:
    pipelinesascode.tekton.dev/task: "[git-clone]"
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/on-cel-expression: |
      event == "pull_request" && "***/*.go".pathChanged()
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    tasks:
      - name: go
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: fetch-repo
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
              params:
                - name: output-path
                  value: $(workspaces.source.path)
                - name: url
                  value: "$(params.repo_url)"
                - name: revision
                  value: "$(params.revision)"
            - name: cache-fetch
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/openshift-pipelines/tekton-caches/main/tekton/cache-fetch.yaml
              params:
                - name: patterns
                  value: ["**go.mod", "**go.sum"]
                - name: source
                  value: oci://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-go:{{hash}}
                - name: cachePath
                  value: $(workspaces.source.path)/go-build-cache
                - name: workingdir
                  value: $(workspaces.source.path)
            - name: cache-test
              image: ghcr.io/openshift-pipelines/tekton-caches/cache:latest
              script: |
                #!/usr/bin/env bash
                env
                ls -l /tekton/*
                ls -l /tekton/*/*

            - name: cache-crane-test
              image: cgr.dev/chainguard/crane
              args:
              - ls
              - image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-go
            - name: cache-upload
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/openshift-pipelines/tekton-caches/main/tekton/cache-upload.yaml
              params:
                - name: patterns
                  value: ["**go.mod", "**go.sum"]
                - name: target
                  value: oci://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-go:{{hash}}
                - name: cachePath
                  value: $(workspaces.source.path)/go-build-cache
                - name: workingdir
                  value: $(workspaces.source.path)
                - name: force-cache-upload
                  value: "false"
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
  workspaces:
    - name: source
      emptyDir: {}
