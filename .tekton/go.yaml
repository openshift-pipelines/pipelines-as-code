---
apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  name: go-testing
  annotations:
    pipelinesascode.tekton.dev/task: "[git-clone]"
    pipelinesascode.tekton.dev/max-keep-runs: "2"
    pipelinesascode.tekton.dev/on-cel-expression: |
      event == "pull_request" && "***/*.go".pathChanged()
spec:
  params:
    - name: repo_url
      value: "{{repo_url}}"
    - name: revision
      value: "{{revision}}"
  pipelineSpec:
    params:
      - name: repo_url
      - name: revision
    tasks:
      - name: go
        taskSpec:
          workspaces:
            - name: source
          steps:
            - name: fetch-repo
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/tektoncd/catalog/main/stepaction/git-clone/0.1/git-clone.yaml
              params:
                - name: output-path
                  value: $(workspaces.source.path)
                - name: url
                  value: "$(params.repo_url)"
                - name: revision
                  value: "$(params.revision)"
            - name: cache-fetch
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/openshift-pipelines/tekton-caches/main/tekton/cache-fetch.yaml
              params:
                - name: patterns
                  value: ["**go.mod", "**go.sum"]
                - name: source
                  value: oci://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-go:{{hash}}
                - name: cachePath
                  value: $(workspaces.source.path)/go-build-cache
                - name: workingdir
                  value: $(workspaces.source.path)
            - name: unittest
              # we get bumped out when usingh the official image with docker.io
              # ratelimit so workaround this.
              image: golang:1.21
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
              workingDir: $(workspaces.source.path)
              script: |
                #!/usr/bin/env bash
                set -eux
                git config --global --add safe.directory $(workspaces.source.path)
                export GO_TEST_FLAGS="-v -race -coverprofile=coverage.txt -covermode=atomic"
                make test

            - name: coverage
              image: golang:1.21
              env:
                - name: CODECOV_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: pipelines-as-code-codecov-token
                      key: token
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
                - name: GITHUB_REPOSITORY
                  value: "{{repo_owner}}/{{repo_name}}"
                - name: GITHUB_PULL_REQUEST_ID
                  value: "{{pull_request_number}}"
              workingDir: $(workspaces.source.path)
              script: |
                #!/usr/bin/env bash
                set -eux
                ARCH=aarch64
                git config --global --add safe.directory $(workspaces.source.path)
                git fetch -a --tags
                curl -LOs https://uploader.codecov.io/v0.7.3/aarch64/codecov
                chmod +x ./codecov
                ./codecov -P $GITHUB_PULL_REQUEST_ID -C {{revision}} -v
            - name: lint
              image: golangci/golangci-lint:latest
              workingDir: $(workspaces.source.path)
              env:
                - name: GOCACHE
                  value: $(workspaces.source.path)/go-build-cache/cache
                - name: GOMODCACHE
                  value: $(workspaces.source.path)/go-build-cache/mod
                - name: GOLANGCILINT_CACHE
                  value: $(workspaces.source.path)/go-build-cache/golangci-cache
              script: |
                #!/usr/bin/env bash
                set -eux
                make lint-go
            - name: cache-upload
              ref:
                resolver: http
                params:
                  - name: url
                    value: https://raw.githubusercontent.com/openshift-pipelines/tekton-caches/main/tekton/cache-upload.yaml
              params:
                - name: patterns
                  value: ["**go.mod", "**go.sum"]
                - name: target
                  value: oci://image-registry.openshift-image-registry.svc:5000/$(context.pipelineRun.namespace)/cache-go:{{hash}}
                - name: cachePath
                  value: $(workspaces.source.path)/go-build-cache
                - name: workingdir
                  value: $(workspaces.source.path)
                - name: force-cache-upload
                  value: "false"
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
  workspaces:
    - name: source
      emptyDir: {}
