apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelinesascode.tekton.dev/git-auth-secret: pac-gitauth-bcnx
    pipelinesascode.tekton.dev/max-keep-runs: "4"
    pipelinesascode.tekton.dev/on-event: '[pull_request, push]'
    pipelinesascode.tekton.dev/on-target-branch: main
    pipelinesascode.tekton.dev/pull-request: "66"
    pipelinesascode.tekton.dev/repo-url: https://github.com/savitaashture/article
    pipelinesascode.tekton.dev/sha-title: add yaml changes1111
    pipelinesascode.tekton.dev/sha-url: https://github.com/savitaashture/article/commit/5b2e4edec223ec8d507a76c61d6be5fc13323e01
    pipelinesascode.tekton.dev/task: git-clone
  creationTimestamp: "2022-09-09T11:22:53Z"
  finalizers:
    - pipelineruns.tekton.dev
  generateName: article-
  generation: 1
  labels:
    app.kubernetes.io/managed-by: pipelinesascode.tekton.dev
    app.kubernetes.io/version: nightly
    pipelinesascode.tekton.dev/branch: main
    pipelinesascode.tekton.dev/event-type: pull_request
    pipelinesascode.tekton.dev/git-provider: github
    pipelinesascode.tekton.dev/original-prname: article
    pipelinesascode.tekton.dev/repository: sm43-pac-app
    pipelinesascode.tekton.dev/sender: savitaashture
    pipelinesascode.tekton.dev/sha: 5b2e4edec223ec8d507a76c61d6be5fc13323e01
    pipelinesascode.tekton.dev/state: started
    pipelinesascode.tekton.dev/url-org: savitaashture
    pipelinesascode.tekton.dev/url-repository: article
    tekton.dev/pipeline: article-tr85x
  name: article-tr85x
  namespace: pac-app-pipelines
  resourceVersion: "15352"
  uid: 72cf1535-b851-4812-9420-4257e8d7e871
spec:
  params:
    - name: repo_url
      value: https://github.com/savitaashture/article
    - name: revision
      value: 5b2e4edec223ec8d507a76c61d6be5fc13323e01
  pipelineSpec:
    params:
      - name: repo_url
        type: string
      - name: revision
        type: string
    tasks:
      - name: fetch-repository
        params:
          - name: url
            value: $(params.repo_url)
          - name: revision
            value: $(params.revision)
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          metadata: {}
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ""
              description: Revision to checkout. (branch, tag, sha, ref, etc...)
              name: revision
              type: string
            - default: ""
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: "true"
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: "1"
              description: Perform a shallow clone, fetching only the most recent N commits.
              name: depth
              type: string
            - default: "true"
              description: Set the `http.sslVerify` global git config. Setting this to
                `false` is not advised unless you are sure that you trust your git remote.
              name: sslVerify
              type: string
            - default: ca-bundle.crt
              description: file name of mounted crt using ssl-ca-directory workspace.
                default value is ca-bundle.crt.
              name: crtFileName
              type: string
            - default: ""
              description: Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ""
              description: Define the directory patterns to match or exclude when performing
                a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: "true"
              description: Clean out the contents of the destination directory if it already
                exists before cloning.
              name: deleteExisting
              type: string
            - default: ""
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ""
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ""
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: "true"
              description: Log the commands that are executed during `git-clone`'s operation.
              name: verbose
              type: string
            - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: |
                Absolute path to the user's home directory.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
              type: string
            - description: The precise URL that was fetched by this Task.
              name: url
              type: string
          spec: null
          steps:
            - env:
                - name: HOME
                  value: $(params.userHome)
                - name: PARAM_URL
                  value: $(params.url)
                - name: PARAM_REVISION
                  value: $(params.revision)
                - name: PARAM_REFSPEC
                  value: $(params.refspec)
                - name: PARAM_SUBMODULES
                  value: $(params.submodules)
                - name: PARAM_DEPTH
                  value: $(params.depth)
                - name: PARAM_SSL_VERIFY
                  value: $(params.sslVerify)
                - name: PARAM_CRT_FILENAME
                  value: $(params.crtFileName)
                - name: PARAM_SUBDIRECTORY
                  value: $(params.subdirectory)
                - name: PARAM_DELETE_EXISTING
                  value: $(params.deleteExisting)
                - name: PARAM_HTTP_PROXY
                  value: $(params.httpProxy)
                - name: PARAM_HTTPS_PROXY
                  value: $(params.httpsProxy)
                - name: PARAM_NO_PROXY
                  value: $(params.noProxy)
                - name: PARAM_VERBOSE
                  value: $(params.verbose)
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  value: $(params.sparseCheckoutDirectories)
                - name: PARAM_USER_HOME
                  value: $(params.userHome)
                - name: WORKSPACE_OUTPUT_PATH
                  value: $(workspaces.output.path)
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: $(workspaces.ssh-directory.bound)
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                  value: $(workspaces.ssh-directory.path)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: $(workspaces.basic-auth.bound)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  value: $(workspaces.basic-auth.path)
                - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                  value: $(workspaces.ssl-ca-directory.bound)
                - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                  value: $(workspaces.ssl-ca-directory.path)
              image: $(params.gitInitImage)
              name: clone
              resources: {}
              script: |
                #!/usr/bin/env sh
                set -eu

                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi


                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi

                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi

                if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                   export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                   if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                      export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                   fi
                fi
                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }

                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi

                test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
                test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
                test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"
                RESULT_SHA="$(git rev-parse HEAD)"
                EXIT_CODE="$?"
                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi
                printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
                printf "%s" "${PARAM_URL}" > "$(results.url.path)"
              securityContext:
                runAsNonRoot: true
                runAsUser: 65532
          workspaces:
            - description: The git repo will be cloned onto the volume backing this Workspace.
              name: output
            - description: |
                A .ssh directory with private key, known_hosts, config, etc. Copied to
                the user's home before git commands are executed. Used to authenticate
                with the git remote when performing the clone. Binding a Secret to this
                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: |
                A Workspace containing a .gitconfig and .git-credentials file. These
                will be copied to the user's home before any git commands are run. Any
                other files in this Workspace are ignored. It is strongly recommended
                to use ssh-directory over basic-auth whenever possible and to bind a
                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
            - description: |
                A workspace containing CA certificates, this will be used by Git to
                verify the peer with when fetching or pushing over HTTPS.
              name: ssl-ca-directory
              optional: true
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
      - name: noop-task
        runAfter:
          - fetch-repository
        taskSpec:
          metadata: {}
          spec: null
          steps:
            - image: registry.access.redhat.com/ubi9/ubi-micro
              name: noop-task
              resources: {}
              script: |
                exit 0
              workingDir: $(workspaces.source.path)
          workspaces:
            - name: source
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
      - name: basic-auth
  serviceAccountName: default
  timeout: 1h0m0s
  workspaces:
    - name: source
      volumeClaimTemplate:
        metadata:
          creationTimestamp: null
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
        status: {}
    - name: basic-auth
      secret:
        secretName: pac-gitauth-bcnx
status:
  conditions:
    - lastTransitionTime: "2022-09-09T11:22:53Z"
      message: 'Tasks Completed: 0 (Failed: 0, Cancelled 0), Incomplete: 2, Skipped:
      0'
      reason: Running
      status: Unknown
      type: Succeeded
  pipelineSpec:
    params:
      - name: repo_url
        type: string
      - name: revision
        type: string
    tasks:
      - name: fetch-repository
        params:
          - name: url
            value: https://github.com/savitaashture/article
          - name: revision
            value: 5b2e4edec223ec8d507a76c61d6be5fc13323e01
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          metadata: {}
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ""
              description: Revision to checkout. (branch, tag, sha, ref, etc...)
              name: revision
              type: string
            - default: ""
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: "true"
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: "1"
              description: Perform a shallow clone, fetching only the most recent N commits.
              name: depth
              type: string
            - default: "true"
              description: Set the `http.sslVerify` global git config. Setting this to
                `false` is not advised unless you are sure that you trust your git remote.
              name: sslVerify
              type: string
            - default: ca-bundle.crt
              description: file name of mounted crt using ssl-ca-directory workspace.
                default value is ca-bundle.crt.
              name: crtFileName
              type: string
            - default: ""
              description: Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ""
              description: Define the directory patterns to match or exclude when performing
                a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: "true"
              description: Clean out the contents of the destination directory if it already
                exists before cloning.
              name: deleteExisting
              type: string
            - default: ""
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ""
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ""
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: "true"
              description: Log the commands that are executed during `git-clone`'s operation.
              name: verbose
              type: string
            - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: |
                Absolute path to the user's home directory.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
              type: string
            - description: The precise URL that was fetched by this Task.
              name: url
              type: string
          spec: null
          steps:
            - env:
                - name: HOME
                  value: $(params.userHome)
                - name: PARAM_URL
                  value: $(params.url)
                - name: PARAM_REVISION
                  value: $(params.revision)
                - name: PARAM_REFSPEC
                  value: $(params.refspec)
                - name: PARAM_SUBMODULES
                  value: $(params.submodules)
                - name: PARAM_DEPTH
                  value: $(params.depth)
                - name: PARAM_SSL_VERIFY
                  value: $(params.sslVerify)
                - name: PARAM_CRT_FILENAME
                  value: $(params.crtFileName)
                - name: PARAM_SUBDIRECTORY
                  value: $(params.subdirectory)
                - name: PARAM_DELETE_EXISTING
                  value: $(params.deleteExisting)
                - name: PARAM_HTTP_PROXY
                  value: $(params.httpProxy)
                - name: PARAM_HTTPS_PROXY
                  value: $(params.httpsProxy)
                - name: PARAM_NO_PROXY
                  value: $(params.noProxy)
                - name: PARAM_VERBOSE
                  value: $(params.verbose)
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                  value: $(params.sparseCheckoutDirectories)
                - name: PARAM_USER_HOME
                  value: $(params.userHome)
                - name: WORKSPACE_OUTPUT_PATH
                  value: $(workspaces.output.path)
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: $(workspaces.ssh-directory.bound)
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                  value: $(workspaces.ssh-directory.path)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: $(workspaces.basic-auth.bound)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  value: $(workspaces.basic-auth.path)
                - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                  value: $(workspaces.ssl-ca-directory.bound)
                - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                  value: $(workspaces.ssl-ca-directory.path)
              image: $(params.gitInitImage)
              name: clone
              resources: {}
              script: |
                #!/usr/bin/env sh
                set -eu

                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi


                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi

                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi

                if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                   export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                   if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                      export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                   fi
                fi
                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }

                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi

                test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
                test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
                test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"
                RESULT_SHA="$(git rev-parse HEAD)"
                EXIT_CODE="$?"
                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi
                printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
                printf "%s" "${PARAM_URL}" > "$(results.url.path)"
              securityContext:
                runAsNonRoot: true
                runAsUser: 65532
          workspaces:
            - description: The git repo will be cloned onto the volume backing this Workspace.
              name: output
            - description: |
                A .ssh directory with private key, known_hosts, config, etc. Copied to
                the user's home before git commands are executed. Used to authenticate
                with the git remote when performing the clone. Binding a Secret to this
                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: |
                A Workspace containing a .gitconfig and .git-credentials file. These
                will be copied to the user's home before any git commands are run. Any
                other files in this Workspace are ignored. It is strongly recommended
                to use ssh-directory over basic-auth whenever possible and to bind a
                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
            - description: |
                A workspace containing CA certificates, this will be used by Git to
                verify the peer with when fetching or pushing over HTTPS.
              name: ssl-ca-directory
              optional: true
        workspaces:
          - name: output
            workspace: source
          - name: basic-auth
            workspace: basic-auth
      - name: noop-task
        runAfter:
          - fetch-repository
        taskSpec:
          metadata: {}
          spec: null
          steps:
            - image: registry.access.redhat.com/ubi9/ubi-micro
              name: noop-task
              resources: {}
              script: |
                exit 0
              workingDir: $(workspaces.source.path)
          workspaces:
            - name: source
        workspaces:
          - name: source
            workspace: source
    workspaces:
      - name: source
      - name: basic-auth
  startTime: "2022-09-09T11:22:53Z"
  taskRuns:
    article-tr85x-fetch-repository:
      pipelineTaskName: fetch-repository
      status:
        conditions:
          - lastTransitionTime: "2022-09-09T11:22:54Z"
            message: 'pod status "Initialized":"False"; message: "containers with incomplete
            status: [prepare place-scripts]"'
            reason: Pending
            status: Unknown
            type: Succeeded
        podName: article-tr85x-fetch-repository-pod
        startTime: "2022-09-09T11:22:53Z"
        steps:
          - container: step-clone
            name: clone
            waiting:
              reason: PodInitializing
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          params:
            - description: Repository URL to clone from.
              name: url
              type: string
            - default: ""
              description: Revision to checkout. (branch, tag, sha, ref, etc...)
              name: revision
              type: string
            - default: ""
              description: Refspec to fetch before checking out revision.
              name: refspec
              type: string
            - default: "true"
              description: Initialize and fetch git submodules.
              name: submodules
              type: string
            - default: "1"
              description: Perform a shallow clone, fetching only the most recent N
                commits.
              name: depth
              type: string
            - default: "true"
              description: Set the `http.sslVerify` global git config. Setting this
                to `false` is not advised unless you are sure that you trust your git
                remote.
              name: sslVerify
              type: string
            - default: ca-bundle.crt
              description: file name of mounted crt using ssl-ca-directory workspace.
                default value is ca-bundle.crt.
              name: crtFileName
              type: string
            - default: ""
              description: Subdirectory inside the `output` Workspace to clone the repo
                into.
              name: subdirectory
              type: string
            - default: ""
              description: Define the directory patterns to match or exclude when performing
                a sparse checkout.
              name: sparseCheckoutDirectories
              type: string
            - default: "true"
              description: Clean out the contents of the destination directory if it
                already exists before cloning.
              name: deleteExisting
              type: string
            - default: ""
              description: HTTP proxy server for non-SSL requests.
              name: httpProxy
              type: string
            - default: ""
              description: HTTPS proxy server for SSL requests.
              name: httpsProxy
              type: string
            - default: ""
              description: Opt out of proxying HTTP/HTTPS requests.
              name: noProxy
              type: string
            - default: "true"
              description: Log the commands that are executed during `git-clone`'s operation.
              name: verbose
              type: string
            - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0
              description: The image providing the git-init binary that this Task runs.
              name: gitInitImage
              type: string
            - default: /tekton/home
              description: |
                Absolute path to the user's home directory.
              name: userHome
              type: string
          results:
            - description: The precise commit SHA that was fetched by this Task.
              name: commit
              type: string
            - description: The precise URL that was fetched by this Task.
              name: url
              type: string
          steps:
            - env:
                - name: HOME
                  value: /tekton/home
                - name: PARAM_URL
                  value: https://github.com/savitaashture/article
                - name: PARAM_REVISION
                  value: 5b2e4edec223ec8d507a76c61d6be5fc13323e01
                - name: PARAM_REFSPEC
                - name: PARAM_SUBMODULES
                  value: "true"
                - name: PARAM_DEPTH
                  value: "1"
                - name: PARAM_SSL_VERIFY
                  value: "true"
                - name: PARAM_CRT_FILENAME
                  value: ca-bundle.crt
                - name: PARAM_SUBDIRECTORY
                - name: PARAM_DELETE_EXISTING
                  value: "true"
                - name: PARAM_HTTP_PROXY
                - name: PARAM_HTTPS_PROXY
                - name: PARAM_NO_PROXY
                - name: PARAM_VERBOSE
                  value: "true"
                - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
                - name: PARAM_USER_HOME
                  value: /tekton/home
                - name: WORKSPACE_OUTPUT_PATH
                  value: $(workspaces.output.path)
                - name: WORKSPACE_SSH_DIRECTORY_BOUND
                  value: $(workspaces.ssh-directory.bound)
                - name: WORKSPACE_SSH_DIRECTORY_PATH
                  value: $(workspaces.ssh-directory.path)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
                  value: $(workspaces.basic-auth.bound)
                - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
                  value: $(workspaces.basic-auth.path)
                - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
                  value: $(workspaces.ssl-ca-directory.bound)
                - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
                  value: $(workspaces.ssl-ca-directory.path)
              image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0
              name: clone
              resources: {}
              script: |
                #!/usr/bin/env sh
                set -eu

                if [ "${PARAM_VERBOSE}" = "true" ] ; then
                  set -x
                fi


                if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                  cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                  chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                  chmod 400 "${PARAM_USER_HOME}/.gitconfig"
                fi

                if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                  cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                  chmod 700 "${PARAM_USER_HOME}"/.ssh
                  chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
                fi

                if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                   export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
                   if [ "${PARAM_CRT_FILENAME}" != "" ] ; then
                      export GIT_SSL_CAINFO="${WORKSPACE_SSL_CA_DIRECTORY_PATH}/${PARAM_CRT_FILENAME}"
                   fi
                fi
                CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

                cleandir() {
                  # Delete any existing contents of the repo directory if it exists.
                  #
                  # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                  # or the root of a mounted volume.
                  if [ -d "${CHECKOUT_DIR}" ] ; then
                    # Delete non-hidden files and directories
                    rm -rf "${CHECKOUT_DIR:?}"/*
                    # Delete files and directories starting with . but excluding ..
                    rm -rf "${CHECKOUT_DIR}"/.[!.]*
                    # Delete files and directories starting with .. plus any other character
                    rm -rf "${CHECKOUT_DIR}"/..?*
                  fi
                }

                if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                  cleandir
                fi

                test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
                test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
                test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

                /ko-app/git-init \
                  -url="${PARAM_URL}" \
                  -revision="${PARAM_REVISION}" \
                  -refspec="${PARAM_REFSPEC}" \
                  -path="${CHECKOUT_DIR}" \
                  -sslVerify="${PARAM_SSL_VERIFY}" \
                  -submodules="${PARAM_SUBMODULES}" \
                  -depth="${PARAM_DEPTH}" \
                  -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
                cd "${CHECKOUT_DIR}"
                RESULT_SHA="$(git rev-parse HEAD)"
                EXIT_CODE="$?"
                if [ "${EXIT_CODE}" != 0 ] ; then
                  exit "${EXIT_CODE}"
                fi
                printf "%s" "${RESULT_SHA}" > "/tekton/results/commit"
                printf "%s" "${PARAM_URL}" > "/tekton/results/url"
              securityContext:
                runAsNonRoot: true
                runAsUser: 65532
          workspaces:
            - description: The git repo will be cloned onto the volume backing this
                Workspace.
              name: output
            - description: |
                A .ssh directory with private key, known_hosts, config, etc. Copied to
                the user's home before git commands are executed. Used to authenticate
                with the git remote when performing the clone. Binding a Secret to this
                Workspace is strongly recommended over other volume types.
              name: ssh-directory
              optional: true
            - description: |
                A Workspace containing a .gitconfig and .git-credentials file. These
                will be copied to the user's home before any git commands are run. Any
                other files in this Workspace are ignored. It is strongly recommended
                to use ssh-directory over basic-auth whenever possible and to bind a
                Secret to this Workspace over other volume types.
              name: basic-auth
              optional: true
            - description: |
                A workspace containing CA certificates, this will be used by Git to
                verify the peer with when fetching or pushing over HTTPS.
              name: ssl-ca-directory
              optional: true
