apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  annotations:
    pipelinesascode.tekton.dev/git-auth-secret: pac-gitauth-smiq
    pipelinesascode.tekton.dev/installation-id: "24533184"
    pipelinesascode.tekton.dev/max-keep-runs: "5"
    pipelinesascode.tekton.dev/on-event: pull_request
    pipelinesascode.tekton.dev/on-target-branch: main
    pipelinesascode.tekton.dev/pull-request: "28"
    pipelinesascode.tekton.dev/sha-title: fail it
    pipelinesascode.tekton.dev/sha-url: https://github.com/sm43/pac-app/commit/1e65fcc114bf71045c86c25dd204755735b28d09
    pipelinesascode.tekton.dev/repo-url: https://github.com/sm43/pac-app
    pipelinesascode.tekton.dev/task: git-clone
  creationTimestamp: "2022-05-24T04:22:12Z"
  generateName: pac-app-pull-request-
  generation: 1
  labels:
    app.kubernetes.io/managed-by: pipelinesascode.tekton.dev
    app.kubernetes.io/version: nightly-20220524-2b14718
    pipelinesascode.tekton.dev/branch: main
    pipelinesascode.tekton.dev/check-run-id: "6566930543"
    pipelinesascode.tekton.dev/event-type: pull_request
    pipelinesascode.tekton.dev/git-provider: github
    pipelinesascode.tekton.dev/original-prname: pac-app-pull-request
    pipelinesascode.tekton.dev/repository: sm43-pac-app
    pipelinesascode.tekton.dev/sender: sm43
    pipelinesascode.tekton.dev/sha: 1e65fcc114bf71045c86c25dd204755735b28d09
    pipelinesascode.tekton.dev/state: completed
    pipelinesascode.tekton.dev/url-org: sm43
    pipelinesascode.tekton.dev/url-repository: pac-app
    tekton.dev/pipeline: pac-app-pull-request-rg4f9
  name: pac-app-pull-request-rg4f9
  namespace: pac-app-pipelines
  resourceVersion: "252962"
  uid: de3d3345-932c-4072-b915-8235e3b91b6d
spec:
  params:
  - name: repo_url
    value: https://github.com/sm43/pac-app
  - name: revision
    value: 1e65fcc114bf71045c86c25dd204755735b28d09
  pipelineSpec:
    params:
    - name: repo_url
      type: string
    - name: revision
      type: string
    tasks:
    - name: fetch-repository
      params:
      - name: url
        value: $(params.repo_url)
      - name: revision
        value: $(params.revision)
      taskSpec:
        description: |-
          These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
          The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
        metadata: {}
        params:
        - description: Repository URL to clone from.
          name: url
          type: string
        - default: ""
          description: Revision to checkout. (branch, tag, sha, ref, etc...)
          name: revision
          type: string
        - default: ""
          description: Refspec to fetch before checking out revision.
          name: refspec
          type: string
        - default: "true"
          description: Initialize and fetch git submodules.
          name: submodules
          type: string
        - default: "1"
          description: Perform a shallow clone, fetching only the most recent N commits.
          name: depth
          type: string
        - default: "true"
          description: Set the `http.sslVerify` global git config. Setting this to
            `false` is not advised unless you are sure that you trust your git remote.
          name: sslVerify
          type: string
        - default: ""
          description: Subdirectory inside the `output` Workspace to clone the repo
            into.
          name: subdirectory
          type: string
        - default: ""
          description: Define the directory patterns to match or exclude when performing
            a sparse checkout.
          name: sparseCheckoutDirectories
          type: string
        - default: "true"
          description: Clean out the contents of the destination directory if it already
            exists before cloning.
          name: deleteExisting
          type: string
        - default: ""
          description: HTTP proxy server for non-SSL requests.
          name: httpProxy
          type: string
        - default: ""
          description: HTTPS proxy server for SSL requests.
          name: httpsProxy
          type: string
        - default: ""
          description: Opt out of proxying HTTP/HTTPS requests.
          name: noProxy
          type: string
        - default: "true"
          description: Log the commands that are executed during `git-clone`'s operation.
          name: verbose
          type: string
        - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0
          description: The image providing the git-init binary that this Task runs.
          name: gitInitImage
          type: string
        - default: /tekton/home
          description: |
            Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
            the gitInitImage param with an image containing custom user configuration.
          name: userHome
          type: string
        results:
        - description: The precise commit SHA that was fetched by this Task.
          name: commit
        - description: The precise URL that was fetched by this Task.
          name: url
        spec: null
        steps:
        - env:
          - name: HOME
            value: $(params.userHome)
          - name: PARAM_URL
            value: $(params.url)
          - name: PARAM_REVISION
            value: $(params.revision)
          - name: PARAM_REFSPEC
            value: $(params.refspec)
          - name: PARAM_SUBMODULES
            value: $(params.submodules)
          - name: PARAM_DEPTH
            value: $(params.depth)
          - name: PARAM_SSL_VERIFY
            value: $(params.sslVerify)
          - name: PARAM_SUBDIRECTORY
            value: $(params.subdirectory)
          - name: PARAM_DELETE_EXISTING
            value: $(params.deleteExisting)
          - name: PARAM_HTTP_PROXY
            value: $(params.httpProxy)
          - name: PARAM_HTTPS_PROXY
            value: $(params.httpsProxy)
          - name: PARAM_NO_PROXY
            value: $(params.noProxy)
          - name: PARAM_VERBOSE
            value: $(params.verbose)
          - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
            value: $(params.sparseCheckoutDirectories)
          - name: PARAM_USER_HOME
            value: $(params.userHome)
          - name: WORKSPACE_OUTPUT_PATH
            value: $(workspaces.output.path)
          - name: WORKSPACE_SSH_DIRECTORY_BOUND
            value: $(workspaces.ssh-directory.bound)
          - name: WORKSPACE_SSH_DIRECTORY_PATH
            value: $(workspaces.ssh-directory.path)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
            value: $(workspaces.basic-auth.bound)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
            value: $(workspaces.basic-auth.path)
          - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
            value: $(workspaces.ssl-ca-directory.bound)
          - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
            value: $(workspaces.ssl-ca-directory.path)
          image: $(params.gitInitImage)
          name: clone
          resources: {}
          script: |
            #!/usr/bin/env sh
            set -eu

            if [ "${PARAM_VERBOSE}" = "true" ] ; then
              set -x
            fi


            if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
              chmod 400 "${PARAM_USER_HOME}/.git-credentials"
              chmod 400 "${PARAM_USER_HOME}/.gitconfig"
            fi

            if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
              cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
              chmod 700 "${PARAM_USER_HOME}"/.ssh
              chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
            fi

            if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
               export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
            fi
            CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

            cleandir() {
              # Delete any existing contents of the repo directory if it exists.
              #
              # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
              # or the root of a mounted volume.
              if [ -d "${CHECKOUT_DIR}" ] ; then
                # Delete non-hidden files and directories
                rm -rf "${CHECKOUT_DIR:?}"/*
                # Delete files and directories starting with . but excluding ..
                rm -rf "${CHECKOUT_DIR}"/.[!.]*
                # Delete files and directories starting with .. plus any other character
                rm -rf "${CHECKOUT_DIR}"/..?*
              fi
            }

            if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
              cleandir
            fi

            test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
            test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
            test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

            /ko-app/git-init \
              -url="${PARAM_URL}" \
              -revision="${PARAM_REVISION}" \
              -refspec="${PARAM_REFSPEC}" \
              -path="${CHECKOUT_DIR}" \
              -sslVerify="${PARAM_SSL_VERIFY}" \
              -submodules="${PARAM_SUBMODULES}" \
              -depth="${PARAM_DEPTH}" \
              -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
            cd "${CHECKOUT_DIR}"
            RESULT_SHA="$(git rev-parse HEAD)"
            EXIT_CODE="$?"
            if [ "${EXIT_CODE}" != 0 ] ; then
              exit "${EXIT_CODE}"
            fi
            printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
            printf "%s" "${PARAM_URL}" > "$(results.url.path)"
        workspaces:
        - description: The git repo will be cloned onto the volume backing this Workspace.
          name: output
        - description: |
            A .ssh directory with private key, known_hosts, config, etc. Copied to
            the user's home before git commands are executed. Used to authenticate
            with the git remote when performing the clone. Binding a Secret to this
            Workspace is strongly recommended over other volume types.
          name: ssh-directory
          optional: true
        - description: |
            A Workspace containing a .gitconfig and .git-credentials file. These
            will be copied to the user's home before any git commands are run. Any
            other files in this Workspace are ignored. It is strongly recommended
            to use ssh-directory over basic-auth whenever possible and to bind a
            Secret to this Workspace over other volume types.
          name: basic-auth
          optional: true
        - description: |
            A workspace containing CA certificates, this will be used by Git to
            verify the peer with when fetching or pushing over HTTPS.
          name: ssl-ca-directory
          optional: true
      workspaces:
      - name: output
        workspace: source
      - name: basic-auth
        workspace: basic-auth
    - name: noop-task
      runAfter:
      - fetch-repository
      taskSpec:
        metadata: {}
        spec: null
        steps:
        - image: registry.access.redhat.com/ubi8/ubi-micro:8.4
          name: noop-task
          resources: {}
          script: "exit 1 \n"
          workingDir: $(workspaces.source.path)
        workspaces:
        - name: source
      workspaces:
      - name: source
        workspace: source
    workspaces:
    - name: source
    - name: basic-auth
  serviceAccountName: default
  timeout: 1h0m0s
  workspaces:
  - name: source
    volumeClaimTemplate:
      metadata:
        creationTimestamp: null
      spec:
        accessModes:
        - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
      status: {}
  - name: basic-auth
    secret:
      secretName: pac-gitauth-smiq
status:
  completionTime: "2022-05-24T04:23:14Z"
  conditions:
  - lastTransitionTime: "2022-05-24T04:23:14Z"
    message: 'Tasks Completed: 2 (Failed: 1, Cancelled 0), Skipped: 0'
    reason: Failed
    status: "False"
    type: Succeeded
  pipelineSpec:
    params:
    - name: repo_url
      type: string
    - name: revision
      type: string
    tasks:
    - name: fetch-repository
      params:
      - name: url
        value: $(params.repo_url)
      - name: revision
        value: $(params.revision)
      taskSpec:
        description: |-
          These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
          The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
        metadata: {}
        params:
        - description: Repository URL to clone from.
          name: url
          type: string
        - default: ""
          description: Revision to checkout. (branch, tag, sha, ref, etc...)
          name: revision
          type: string
        - default: ""
          description: Refspec to fetch before checking out revision.
          name: refspec
          type: string
        - default: "true"
          description: Initialize and fetch git submodules.
          name: submodules
          type: string
        - default: "1"
          description: Perform a shallow clone, fetching only the most recent N commits.
          name: depth
          type: string
        - default: "true"
          description: Set the `http.sslVerify` global git config. Setting this to
            `false` is not advised unless you are sure that you trust your git remote.
          name: sslVerify
          type: string
        - default: ""
          description: Subdirectory inside the `output` Workspace to clone the repo
            into.
          name: subdirectory
          type: string
        - default: ""
          description: Define the directory patterns to match or exclude when performing
            a sparse checkout.
          name: sparseCheckoutDirectories
          type: string
        - default: "true"
          description: Clean out the contents of the destination directory if it already
            exists before cloning.
          name: deleteExisting
          type: string
        - default: ""
          description: HTTP proxy server for non-SSL requests.
          name: httpProxy
          type: string
        - default: ""
          description: HTTPS proxy server for SSL requests.
          name: httpsProxy
          type: string
        - default: ""
          description: Opt out of proxying HTTP/HTTPS requests.
          name: noProxy
          type: string
        - default: "true"
          description: Log the commands that are executed during `git-clone`'s operation.
          name: verbose
          type: string
        - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0
          description: The image providing the git-init binary that this Task runs.
          name: gitInitImage
          type: string
        - default: /tekton/home
          description: |
            Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
            the gitInitImage param with an image containing custom user configuration.
          name: userHome
          type: string
        results:
        - description: The precise commit SHA that was fetched by this Task.
          name: commit
        - description: The precise URL that was fetched by this Task.
          name: url
        spec: null
        steps:
        - env:
          - name: HOME
            value: $(params.userHome)
          - name: PARAM_URL
            value: $(params.url)
          - name: PARAM_REVISION
            value: $(params.revision)
          - name: PARAM_REFSPEC
            value: $(params.refspec)
          - name: PARAM_SUBMODULES
            value: $(params.submodules)
          - name: PARAM_DEPTH
            value: $(params.depth)
          - name: PARAM_SSL_VERIFY
            value: $(params.sslVerify)
          - name: PARAM_SUBDIRECTORY
            value: $(params.subdirectory)
          - name: PARAM_DELETE_EXISTING
            value: $(params.deleteExisting)
          - name: PARAM_HTTP_PROXY
            value: $(params.httpProxy)
          - name: PARAM_HTTPS_PROXY
            value: $(params.httpsProxy)
          - name: PARAM_NO_PROXY
            value: $(params.noProxy)
          - name: PARAM_VERBOSE
            value: $(params.verbose)
          - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
            value: $(params.sparseCheckoutDirectories)
          - name: PARAM_USER_HOME
            value: $(params.userHome)
          - name: WORKSPACE_OUTPUT_PATH
            value: $(workspaces.output.path)
          - name: WORKSPACE_SSH_DIRECTORY_BOUND
            value: $(workspaces.ssh-directory.bound)
          - name: WORKSPACE_SSH_DIRECTORY_PATH
            value: $(workspaces.ssh-directory.path)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
            value: $(workspaces.basic-auth.bound)
          - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
            value: $(workspaces.basic-auth.path)
          - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
            value: $(workspaces.ssl-ca-directory.bound)
          - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
            value: $(workspaces.ssl-ca-directory.path)
          image: $(params.gitInitImage)
          name: clone
          resources: {}
          script: |
            #!/usr/bin/env sh
            set -eu

            if [ "${PARAM_VERBOSE}" = "true" ] ; then
              set -x
            fi


            if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
              cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
              chmod 400 "${PARAM_USER_HOME}/.git-credentials"
              chmod 400 "${PARAM_USER_HOME}/.gitconfig"
            fi

            if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
              cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
              chmod 700 "${PARAM_USER_HOME}"/.ssh
              chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
            fi

            if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
               export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
            fi
            CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

            cleandir() {
              # Delete any existing contents of the repo directory if it exists.
              #
              # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
              # or the root of a mounted volume.
              if [ -d "${CHECKOUT_DIR}" ] ; then
                # Delete non-hidden files and directories
                rm -rf "${CHECKOUT_DIR:?}"/*
                # Delete files and directories starting with . but excluding ..
                rm -rf "${CHECKOUT_DIR}"/.[!.]*
                # Delete files and directories starting with .. plus any other character
                rm -rf "${CHECKOUT_DIR}"/..?*
              fi
            }

            if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
              cleandir
            fi

            test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
            test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
            test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

            /ko-app/git-init \
              -url="${PARAM_URL}" \
              -revision="${PARAM_REVISION}" \
              -refspec="${PARAM_REFSPEC}" \
              -path="${CHECKOUT_DIR}" \
              -sslVerify="${PARAM_SSL_VERIFY}" \
              -submodules="${PARAM_SUBMODULES}" \
              -depth="${PARAM_DEPTH}" \
              -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
            cd "${CHECKOUT_DIR}"
            RESULT_SHA="$(git rev-parse HEAD)"
            EXIT_CODE="$?"
            if [ "${EXIT_CODE}" != 0 ] ; then
              exit "${EXIT_CODE}"
            fi
            printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
            printf "%s" "${PARAM_URL}" > "$(results.url.path)"
        workspaces:
        - description: The git repo will be cloned onto the volume backing this Workspace.
          name: output
        - description: |
            A .ssh directory with private key, known_hosts, config, etc. Copied to
            the user's home before git commands are executed. Used to authenticate
            with the git remote when performing the clone. Binding a Secret to this
            Workspace is strongly recommended over other volume types.
          name: ssh-directory
          optional: true
        - description: |
            A Workspace containing a .gitconfig and .git-credentials file. These
            will be copied to the user's home before any git commands are run. Any
            other files in this Workspace are ignored. It is strongly recommended
            to use ssh-directory over basic-auth whenever possible and to bind a
            Secret to this Workspace over other volume types.
          name: basic-auth
          optional: true
        - description: |
            A workspace containing CA certificates, this will be used by Git to
            verify the peer with when fetching or pushing over HTTPS.
          name: ssl-ca-directory
          optional: true
      workspaces:
      - name: output
        workspace: source
      - name: basic-auth
        workspace: basic-auth
    - name: noop-task
      runAfter:
      - fetch-repository
      taskSpec:
        metadata: {}
        spec: null
        steps:
        - image: registry.access.redhat.com/ubi8/ubi-micro:8.4
          name: noop-task
          resources: {}
          script: "exit 1 \n"
          workingDir: $(workspaces.source.path)
        workspaces:
        - name: source
      workspaces:
      - name: source
        workspace: source
    workspaces:
    - name: source
    - name: basic-auth
  startTime: "2022-05-24T04:22:12Z"
  taskRuns:
    pac-app-pull-request-rg4f9-fetch-repository:
      pipelineTaskName: fetch-repository
      status:
        completionTime: "2022-05-24T04:22:54Z"
        conditions:
        - lastTransitionTime: "2022-05-24T04:22:54Z"
          message: All Steps have completed executing
          reason: Succeeded
          status: "True"
          type: Succeeded
        podName: pac-app-pull-request-rg4f9-fetch-repository-pod
        startTime: "2022-05-24T04:22:12Z"
        steps:
        - container: step-clone
          imageID: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init@sha256:c0b0ed1cd81090ce8eecf60b936e9345089d9dfdb6ebdd2fd7b4a0341ef4f2b9
          name: clone
          terminated:
            containerID: containerd://30f7d4ea54414168a996eff544978e72944110bdc507cac54542fc3e20122f71
            exitCode: 0
            finishedAt: "2022-05-24T04:22:53Z"
            message: '[{"key":"commit","value":"1e65fcc114bf71045c86c25dd204755735b28d09","type":1},{"key":"url","value":"https://github.com/sm43/pac-app","type":1}]'
            reason: Completed
            startedAt: "2022-05-24T04:22:52Z"
        taskResults:
        - name: commit
          value: 1e65fcc114bf71045c86c25dd204755735b28d09
        - name: url
          value: https://github.com/sm43/pac-app
        taskSpec:
          description: |-
            These Tasks are Git tasks to work with repositories used by other tasks in your Pipeline.
            The git-clone Task will clone a repo from the provided url into the output Workspace. By default the repo will be cloned into the root of your Workspace. You can clone into a subdirectory by setting this Task's subdirectory param. This Task also supports sparse checkouts. To perform a sparse checkout, pass a list of comma separated directory patterns to this Task's sparseCheckoutDirectories param.
          params:
          - description: Repository URL to clone from.
            name: url
            type: string
          - default: ""
            description: Revision to checkout. (branch, tag, sha, ref, etc...)
            name: revision
            type: string
          - default: ""
            description: Refspec to fetch before checking out revision.
            name: refspec
            type: string
          - default: "true"
            description: Initialize and fetch git submodules.
            name: submodules
            type: string
          - default: "1"
            description: Perform a shallow clone, fetching only the most recent N
              commits.
            name: depth
            type: string
          - default: "true"
            description: Set the `http.sslVerify` global git config. Setting this
              to `false` is not advised unless you are sure that you trust your git
              remote.
            name: sslVerify
            type: string
          - default: ""
            description: Subdirectory inside the `output` Workspace to clone the repo
              into.
            name: subdirectory
            type: string
          - default: ""
            description: Define the directory patterns to match or exclude when performing
              a sparse checkout.
            name: sparseCheckoutDirectories
            type: string
          - default: "true"
            description: Clean out the contents of the destination directory if it
              already exists before cloning.
            name: deleteExisting
            type: string
          - default: ""
            description: HTTP proxy server for non-SSL requests.
            name: httpProxy
            type: string
          - default: ""
            description: HTTPS proxy server for SSL requests.
            name: httpsProxy
            type: string
          - default: ""
            description: Opt out of proxying HTTP/HTTPS requests.
            name: noProxy
            type: string
          - default: "true"
            description: Log the commands that are executed during `git-clone`'s operation.
            name: verbose
            type: string
          - default: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.29.0
            description: The image providing the git-init binary that this Task runs.
            name: gitInitImage
            type: string
          - default: /tekton/home
            description: |
              Absolute path to the user's home directory. Set this explicitly if you are running the image as a non-root user or have overridden
              the gitInitImage param with an image containing custom user configuration.
            name: userHome
            type: string
          results:
          - description: The precise commit SHA that was fetched by this Task.
            name: commit
          - description: The precise URL that was fetched by this Task.
            name: url
          steps:
          - env:
            - name: HOME
              value: $(params.userHome)
            - name: PARAM_URL
              value: $(params.url)
            - name: PARAM_REVISION
              value: $(params.revision)
            - name: PARAM_REFSPEC
              value: $(params.refspec)
            - name: PARAM_SUBMODULES
              value: $(params.submodules)
            - name: PARAM_DEPTH
              value: $(params.depth)
            - name: PARAM_SSL_VERIFY
              value: $(params.sslVerify)
            - name: PARAM_SUBDIRECTORY
              value: $(params.subdirectory)
            - name: PARAM_DELETE_EXISTING
              value: $(params.deleteExisting)
            - name: PARAM_HTTP_PROXY
              value: $(params.httpProxy)
            - name: PARAM_HTTPS_PROXY
              value: $(params.httpsProxy)
            - name: PARAM_NO_PROXY
              value: $(params.noProxy)
            - name: PARAM_VERBOSE
              value: $(params.verbose)
            - name: PARAM_SPARSE_CHECKOUT_DIRECTORIES
              value: $(params.sparseCheckoutDirectories)
            - name: PARAM_USER_HOME
              value: $(params.userHome)
            - name: WORKSPACE_OUTPUT_PATH
              value: $(workspaces.output.path)
            - name: WORKSPACE_SSH_DIRECTORY_BOUND
              value: $(workspaces.ssh-directory.bound)
            - name: WORKSPACE_SSH_DIRECTORY_PATH
              value: $(workspaces.ssh-directory.path)
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND
              value: $(workspaces.basic-auth.bound)
            - name: WORKSPACE_BASIC_AUTH_DIRECTORY_PATH
              value: $(workspaces.basic-auth.path)
            - name: WORKSPACE_SSL_CA_DIRECTORY_BOUND
              value: $(workspaces.ssl-ca-directory.bound)
            - name: WORKSPACE_SSL_CA_DIRECTORY_PATH
              value: $(workspaces.ssl-ca-directory.path)
            image: $(params.gitInitImage)
            name: clone
            resources: {}
            script: |
              #!/usr/bin/env sh
              set -eu

              if [ "${PARAM_VERBOSE}" = "true" ] ; then
                set -x
              fi


              if [ "${WORKSPACE_BASIC_AUTH_DIRECTORY_BOUND}" = "true" ] ; then
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.git-credentials" "${PARAM_USER_HOME}/.git-credentials"
                cp "${WORKSPACE_BASIC_AUTH_DIRECTORY_PATH}/.gitconfig" "${PARAM_USER_HOME}/.gitconfig"
                chmod 400 "${PARAM_USER_HOME}/.git-credentials"
                chmod 400 "${PARAM_USER_HOME}/.gitconfig"
              fi

              if [ "${WORKSPACE_SSH_DIRECTORY_BOUND}" = "true" ] ; then
                cp -R "${WORKSPACE_SSH_DIRECTORY_PATH}" "${PARAM_USER_HOME}"/.ssh
                chmod 700 "${PARAM_USER_HOME}"/.ssh
                chmod -R 400 "${PARAM_USER_HOME}"/.ssh/*
              fi

              if [ "${WORKSPACE_SSL_CA_DIRECTORY_BOUND}" = "true" ] ; then
                 export GIT_SSL_CAPATH="${WORKSPACE_SSL_CA_DIRECTORY_PATH}"
              fi
              CHECKOUT_DIR="${WORKSPACE_OUTPUT_PATH}/${PARAM_SUBDIRECTORY}"

              cleandir() {
                # Delete any existing contents of the repo directory if it exists.
                #
                # We don't just "rm -rf ${CHECKOUT_DIR}" because ${CHECKOUT_DIR} might be "/"
                # or the root of a mounted volume.
                if [ -d "${CHECKOUT_DIR}" ] ; then
                  # Delete non-hidden files and directories
                  rm -rf "${CHECKOUT_DIR:?}"/*
                  # Delete files and directories starting with . but excluding ..
                  rm -rf "${CHECKOUT_DIR}"/.[!.]*
                  # Delete files and directories starting with .. plus any other character
                  rm -rf "${CHECKOUT_DIR}"/..?*
                fi
              }

              if [ "${PARAM_DELETE_EXISTING}" = "true" ] ; then
                cleandir
              fi

              test -z "${PARAM_HTTP_PROXY}" || export HTTP_PROXY="${PARAM_HTTP_PROXY}"
              test -z "${PARAM_HTTPS_PROXY}" || export HTTPS_PROXY="${PARAM_HTTPS_PROXY}"
              test -z "${PARAM_NO_PROXY}" || export NO_PROXY="${PARAM_NO_PROXY}"

              /ko-app/git-init \
                -url="${PARAM_URL}" \
                -revision="${PARAM_REVISION}" \
                -refspec="${PARAM_REFSPEC}" \
                -path="${CHECKOUT_DIR}" \
                -sslVerify="${PARAM_SSL_VERIFY}" \
                -submodules="${PARAM_SUBMODULES}" \
                -depth="${PARAM_DEPTH}" \
                -sparseCheckoutDirectories="${PARAM_SPARSE_CHECKOUT_DIRECTORIES}"
              cd "${CHECKOUT_DIR}"
              RESULT_SHA="$(git rev-parse HEAD)"
              EXIT_CODE="$?"
              if [ "${EXIT_CODE}" != 0 ] ; then
                exit "${EXIT_CODE}"
              fi
              printf "%s" "${RESULT_SHA}" > "$(results.commit.path)"
              printf "%s" "${PARAM_URL}" > "$(results.url.path)"
          workspaces:
          - description: The git repo will be cloned onto the volume backing this
              Workspace.
            name: output
          - description: |
              A .ssh directory with private key, known_hosts, config, etc. Copied to
              the user's home before git commands are executed. Used to authenticate
              with the git remote when performing the clone. Binding a Secret to this
              Workspace is strongly recommended over other volume types.
            name: ssh-directory
            optional: true
          - description: |
              A Workspace containing a .gitconfig and .git-credentials file. These
              will be copied to the user's home before any git commands are run. Any
              other files in this Workspace are ignored. It is strongly recommended
              to use ssh-directory over basic-auth whenever possible and to bind a
              Secret to this Workspace over other volume types.
            name: basic-auth
            optional: true
          - description: |
              A workspace containing CA certificates, this will be used by Git to
              verify the peer with when fetching or pushing over HTTPS.
            name: ssl-ca-directory
            optional: true
    pac-app-pull-request-rg4f9-noop-task:
      pipelineTaskName: noop-task
      status:
        completionTime: "2022-05-24T04:23:14Z"
        conditions:
        - lastTransitionTime: "2022-05-24T04:23:14Z"
          message: |
            "step-noop-task" exited with code 1 (image: "registry.access.redhat.com/ubi8/ubi-micro@sha256:a46c5a055628d03dc7802d500062657095ef9855fbea410fa175c356eecbef40"); for logs run: kubectl -n pac-app-pipelines logs pac-app-pull-request-rg4f9-noop-task-pod -c step-noop-task
          reason: Failed
          status: "False"
          type: Succeeded
        podName: pac-app-pull-request-rg4f9-noop-task-pod
        startTime: "2022-05-24T04:22:55Z"
        steps:
        - container: step-noop-task
          imageID: registry.access.redhat.com/ubi8/ubi-micro@sha256:a46c5a055628d03dc7802d500062657095ef9855fbea410fa175c356eecbef40
          name: noop-task
          terminated:
            containerID: containerd://86b5efa135e55cfb4c263d9695e701247465a6e821ebc599f403f769cbea716f
            exitCode: 1
            finishedAt: "2022-05-24T04:23:13Z"
            reason: Error
            startedAt: "2022-05-24T04:23:13Z"
        taskSpec:
          steps:
          - image: registry.access.redhat.com/ubi8/ubi-micro:8.4
            name: noop-task
            resources: {}
            script: "exit 1 \n"
            workingDir: $(workspaces.source.path)
          workspaces:
          - name: source
