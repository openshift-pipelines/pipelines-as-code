{
  "default": "## Root Cause Analysis\nThe pipeline failed due to a test failure in the unit tests.\n\n## Recommended Fix\n1. Check the failing test logs for details\n2. Verify the expected behavior matches the implementation\n3. Update either the test or the implementation accordingly\n\n## Prevention\n- Add more comprehensive test coverage\n- Set up pre-commit hooks to run tests locally\n- Use continuous integration to catch failures early",
  "by_keyword": {
    "npm": "## Root Cause Analysis\nNPM dependency installation failed during the build process.\n\n## Recommended Fix\n1. Run `npm install --legacy-peer-deps` to handle peer dependency conflicts\n2. Clear the npm cache: `npm cache clean --force`\n3. Delete `node_modules` and `package-lock.json`, then reinstall\n\n## Prevention\n- Lock dependencies with exact versions in package.json\n- Commit package-lock.json to version control\n- Use a consistent Node.js version across environments",
    "docker": "## Root Cause Analysis\nDocker build failed due to missing or invalid base image.\n\n## Recommended Fix\n1. Update the Dockerfile to use a valid base image\n2. Ensure the base image tag exists in the registry\n3. Check network connectivity to the image registry\n\n## Prevention\n- Pin specific image versions instead of using 'latest'\n- Use multi-stage builds to reduce layer dependencies\n- Set up a private registry mirror for reliability",
    "timeout": "## Root Cause Analysis\nThe test exceeded the configured timeout limit.\n\n## Recommended Fix\n1. Increase the timeout in the pipeline configuration\n2. Optimize the slow test to run faster\n3. Split long-running tests into smaller units\n\n## Prevention\n- Profile tests to identify performance bottlenecks\n- Use parallel test execution where possible\n- Mock external dependencies to avoid network delays",
    "golang": "## Root Cause Analysis\nGo build or test failed with compilation errors.\n\n## Recommended Fix\n1. Run `go mod tidy` to sync dependencies\n2. Check for missing imports or type mismatches\n3. Verify Go version compatibility\n\n## Prevention\n- Use `go mod vendor` to lock dependencies\n- Enable golangci-lint in pre-commit hooks\n- Keep dependencies up to date with `go get -u`",
    "python": "## Root Cause Analysis\nPython tests failed due to import errors or assertion failures.\n\n## Recommended Fix\n1. Ensure all dependencies are in requirements.txt\n2. Run `pip install -r requirements.txt` in a clean venv\n3. Check Python version compatibility\n\n## Prevention\n- Use virtual environments consistently\n- Pin exact package versions in requirements.txt\n- Run tests with `pytest -v` for detailed output",
    "permission": "## Root Cause Analysis\nPermission denied error when accessing files or resources.\n\n## Recommended Fix\n1. Check file permissions with `ls -la`\n2. Update permissions: `chmod +x script.sh`\n3. Verify user has necessary access rights\n\n## Prevention\n- Set correct permissions in Dockerfile/scripts\n- Use non-root users in containers\n- Document required permissions in README",
    "memory": "## Root Cause Analysis\nOut of memory error during pipeline execution.\n\n## Recommended Fix\n1. Increase memory limits in pipeline configuration\n2. Optimize memory-intensive operations\n3. Add memory cleanup in long-running tasks\n\n## Prevention\n- Profile memory usage to find leaks\n- Use streaming for large file processing\n- Set appropriate resource limits in Kubernetes",
    "network": "## Root Cause Analysis\nNetwork connectivity issue preventing external resource access.\n\n## Recommended Fix\n1. Check network connectivity to external services\n2. Verify firewall rules and proxy settings\n3. Use retry logic for transient failures\n\n## Prevention\n- Mock external dependencies in tests\n- Use health checks before accessing services\n- Implement circuit breakers for reliability",
    "authentication": "## Root Cause Analysis\nAuthentication failed when accessing protected resources.\n\n## Recommended Fix\n1. Verify credentials are correctly configured\n2. Check secret/token expiration dates\n3. Ensure proper permissions are granted\n\n## Prevention\n- Use secret management tools (Vault, sealed-secrets)\n- Rotate credentials regularly\n- Document required permissions clearly"
  },
  "by_provider": {
    "openai": "## Analysis from OpenAI Provider\nThis is a test response from the OpenAI provider.",
    "gemini": "## Analysis from Gemini Provider\nThis is a test response from the Gemini provider."
  }
}
